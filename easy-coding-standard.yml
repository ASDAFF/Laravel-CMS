services:
    # fix all @param, @var, @return tag mallforms
    Symplify\CodingStandard\Fixer\Commenting\ParamReturnAndVarTagMalformsFixer: ~

    SlevomatCodingStandard\Sniffs\Variables\UnusedVariableSniff: ~
    SlevomatCodingStandard\Sniffs\Variables\UselessVariableSniff: ~

    # function ($var) use ($unused) { return $var; }    →   function ($var) { return $var; }
    SlevomatCodingStandard\Sniffs\Functions\UnusedInheritedVariablePassedToClosureSniff: ~

    # echo "hi";;   →   echo "hi";
    SlevomatCodingStandard\Sniffs\PHP\UselessSemicolonSniff: ~

    # ((new Class))->call()   →     (new Class)->call()
    SlevomatCodingStandard\Sniffs\PHP\UselessParenthesesSniff: ~

    # use short array []
    PhpCsFixer\Fixer\ArrayNotation\ArraySyntaxFixer:
        syntax: short

    # detect dead code
    SlevomatCodingStandard\Sniffs\Classes\UnusedPrivateElementsSniff:

    # drop dead use namespaces
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer:

    # and sort them A → Z
    PhpCsFixer\Fixer\Import\OrderedImportsFixer:

    # $value;;
    PhpCsFixer\Fixer\Semicolon\NoEmptyStatementFixer:

    # final class { ... protected ... }
    PhpCsFixer\Fixer\ClassNotation\ProtectedToPrivateFixer:

    # continue (2);
    PhpCsFixer\Fixer\ControlStructure\NoUnneededControlParenthesesFixer:

    # { echo 'hi'; }
    PhpCsFixer\Fixer\ControlStructure\NoUnneededCurlyBracesFixer:

    # $var = 5; return $var;    →    return $var;
    PhpCsFixer\Fixer\ReturnNotation\ReturnAssignmentFixer:

    # $var = $foo : $foo ? $bar → $var = $foo ?: $bar
    SlevomatCodingStandard\Sniffs\ControlStructures\RequireShortTernaryOperatorSniff:

    # $var = $var + foo → $var += $foo
    SlevomatCodingStandard\Sniffs\Operators\RequireCombinedAssignmentOperatorSniff:
    
    # [ 1 , 2];
    PhpCsFixer\Fixer\ArrayNotation\NoWhitespaceBeforeCommaInArrayFixer:

    # [    1, 2   ];
    PhpCsFixer\Fixer\ArrayNotation\TrimArraySpacesFixer:

    # [ 1,\n2 ];
    PhpCsFixer\Fixer\ArrayNotation\TrailingCommaInMultilineArrayFixer:

    # [1, ]   =>   [1]
    PhpCsFixer\Fixer\ArrayNotation\NoTrailingCommaInSinglelineArrayFixer:

    # [1,2]
    PhpCsFixer\Fixer\ArrayNotation\WhitespaceAfterCommaInArrayFixer:

    # PhpCsFixer\Fixer\Whitespace\ArrayIndentationFixer:

    # check for forgotten "git merge" conflicts
    PHP_CodeSniffer\Standards\Generic\Sniffs\VersionControl\GitMergeConflictSniff: ~

    # remove empty inline comments
    SlevomatCodingStandard\Sniffs\Commenting\EmptyCommentSniff:

    # __CONSTRUCT()   =>   __construct()
    PhpCsFixer\Fixer\PhpUnit\PhpUnitMethodCasingFixer: ~

    # __CLASS__   =>   self::class
    SlevomatCodingStandard\Sniffs\Classes\ModernClassNameReferenceSniff: ~

    # get_class()   =>   __CLASS__
    PhpCsFixer\Fixer\LanguageConstruct\FunctionToConstantFixer: ~

    # "$var" => "${var}"
    PhpCsFixer\Fixer\StringNotation\ExplicitStringVariableFixer: ~
    PhpCsFixer\Fixer\LanguageConstruct\ExplicitIndirectVariableFixer: ~

    # PSR-4
    PhpCsFixer\Fixer\Basic\Psr4Fixer: ~

    # private $one, $two;
    PhpCsFixer\Fixer\ClassNotation\SingleClassElementPerStatementFixer:
        elements: ['property', 'const']

    # new SomeClass;
    PhpCsFixer\Fixer\Operator\NewWithBracesFixer: ~

    PhpCsFixer\Fixer\ClassNotation\ClassDefinitionFixer:
        singleLine: true

    # $value++;   =>   ++$value;
    PhpCsFixer\Fixer\Operator\StandardizeIncrementFixer: ~

    # class SomeClass { ... return SomeClass; }
    PhpCsFixer\Fixer\ClassNotation\SelfAccessorFixer: ~

    # __dir__
    PhpCsFixer\Fixer\Casing\MagicConstantCasingFixer: ~

    # if ($value = $this->someMethod()) { ... }
    PHP_CodeSniffer\Standards\Generic\Sniffs\CodeAnalysis\AssignmentInConditionSniff: ~

    # if (...) { return 1; } else { return 2; }
    PhpCsFixer\Fixer\ControlStructure\NoUselessElseFixer: ~

    # "value"
    PhpCsFixer\Fixer\StringNotation\SingleQuoteFixer: ~

    # if ("result" === $value)
    PhpCsFixer\Fixer\ControlStructure\YodaStyleFixer:
        equal: false
        identical: false
        less_and_greater: false

    # private $property; public $anotherProperty;
    PhpCsFixer\Fixer\ClassNotation\OrderedClassElementsFixer: ~

    # use SomeTrait, AnotherTrait;   →   use SomeTrait;\nuse AnotherTrait;
    SlevomatCodingStandard\Sniffs\Classes\TraitUseDeclarationSniff: ~

    # null|Type   →   Type|null
    SlevomatCodingStandard\Sniffs\TypeHints\NullTypeHintOnLastPositionSniff: ~

    # remove empty spaces in phpdoc
    PhpCsFixer\Fixer\Comment\NoTrailingWhitespaceInCommentFixer:

    # trim 2+ empty lines in PhpDoc to 1
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimConsecutiveBlankLineSeparationFixer: ~

    # remove empty lines in phpdoc (be careful, can be buggy)
    PhpCsFixer\Fixer\Phpdoc\PhpdocTrimFixer: ~

    # remove empty phpdocs
    Symplify\CodingStandard\Fixer\Commenting\RemoveEmptyDocBlockFixer: ~

    # no empty doc blocks
    PhpCsFixer\Fixer\Phpdoc\NoEmptyPhpdocFixer: ~

    # @return null | @return void
    PhpCsFixer\Fixer\Phpdoc\PhpdocNoEmptyReturnFixer: ~

    # /** docblock */\n\t$code;
    PhpCsFixer\Fixer\Phpdoc\PhpdocIndentFixer: ~

    # /** boolean */
    PhpCsFixer\Fixer\Phpdoc\PhpdocTypesFixer: ~

    # SomeClass { ... /** @return SomeClass */ ... }
    PhpCsFixer\Fixer\Phpdoc\PhpdocReturnSelfReferenceFixer: ~

    # remove variable name from @var and @type annotations
    PhpCsFixer\Fixer\Phpdoc\PhpdocVarWithoutNameFixer: ~

    # remove unused aliases
    SlevomatCodingStandard\Sniffs\Namespaces\UselessAliasSniff: ~

    # drop dead use namespaces
    PhpCsFixer\Fixer\Import\NoUnusedImportsFixer: ~

    # and sort them A → Z
    PhpCsFixer\Fixer\Import\OrderedImportsFixer: ~

    # <?php\nnamespace SomeNamespace;
    PhpCsFixer\Fixer\NamespaceNotation\SingleBlankLineBeforeNamespaceFixer: ~

    # $this->assertEquals()    =>    $this->assertSame()
    PhpCsFixer\Fixer\PhpUnit\PhpUnitStrictFixer: ~

    # test<>()
    PhpCsFixer\Fixer\PhpUnit\PhpUnitTestAnnotationFixer: ~

    # public setUp()   =>   protected setUp()
    PhpCsFixer\Fixer\PhpUnit\PhpUnitSetUpTearDownVisibilityFixer: ~

    # $builder->addThis()\n    ->addThat();
    PhpCsFixer\Fixer\Whitespace\MethodChainingIndentationFixer: ~

    # 1 empty line between constants, properties and methods
    PhpCsFixer\Fixer\ClassNotation\ClassAttributesSeparationFixer:
        elements: ['const', 'property', 'method']

    # "string" . "another string"
    PhpCsFixer\Fixer\Operator\ConcatSpaceFixer:
        spacing: one

    # if (! $statement) {...
    PhpCsFixer\Fixer\Operator\NotOperatorWithSuccessorSpaceFixer: ~

    # ...
    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\SuperfluousWhitespaceSniff:
        ignoreBlankLines: false

   # $value = (  type ) ...;
    PhpCsFixer\Fixer\CastNotation\CastSpacesFixer: ~

    # $value   +  =   5;
    # PhpCsFixer\Fixer\Operator\BinaryOperatorSpacesFixer:
    #    align_double_arrow: false
    #    align_equals: false

    # someMethod(  string   $value)
    PhpCsFixer\Fixer\FunctionNotation\FunctionTypehintSpaceFixer: ~

    # class someClass {\n\n
    PhpCsFixer\Fixer\ClassNotation\NoBlankLinesAfterClassOpeningFixer: ~

    # $value = 5   ;
    PhpCsFixer\Fixer\Semicolon\NoSinglelineWhitespaceBeforeSemicolonsFixer: ~

    # /**    @var   Type   $variable */
    PhpCsFixer\Fixer\Phpdoc\PhpdocSingleLineVarSpacingFixer: ~

    #      namespace ...;
    PhpCsFixer\Fixer\NamespaceNotation\NoLeadingNamespaceWhitespaceFixer: ~

    # $value[ 'key' ];
    PhpCsFixer\Fixer\Whitespace\NoSpacesAroundOffsetFixer: ~

    # \n    \n
    # PhpCsFixer\Fixer\Whitespace\NoWhitespaceInBlankLineFixer: ~

    # someMethod()    :    Type
    PhpCsFixer\Fixer\FunctionNotation\ReturnTypeDeclarationFixer: ~

    # $var = 5;     $hello = 'hi';
    PhpCsFixer\Fixer\Semicolon\SpaceAfterSemicolonFixer: ~

    # '$value   ?    'yes'    :    'no';
    PhpCsFixer\Fixer\Operator\TernaryOperatorSpacesFixer: ~

    # someFunction($value,$anotherValue)
    PhpCsFixer\Fixer\FunctionNotation\MethodArgumentSpaceFixer: ~

    PHP_CodeSniffer\Standards\Squiz\Sniffs\WhiteSpace\LanguageConstructSpacingSniff: ~

    SlevomatCodingStandard\Sniffs\Classes\TraitUseSpacingSniff:
        linesCountAfterLastUse: 1
        linesCountAfterLastUseWhenLastInClass: 0
        linesCountBeforeFirstUse: 0
        linesCountBetweenUses: 0

    # $value == 5;   =>   $value === 5;
    PhpCsFixer\Fixer\Strict\StrictComparisonFixer: ~

    # is_null($value);   =>   $value === null;
    PhpCsFixer\Fixer\LanguageConstruct\IsNullFixer:
        use_yoda_style: false

    # in_array('key', $value)   =>   in_array('key', $value, true)
    PhpCsFixer\Fixer\Strict\StrictParamFixer: ~

    PHP_CodeSniffer\Standards\PSR2\Sniffs\Namespaces\NamespaceDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Namespaces\UseDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Classes\ClassDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Classes\PropertyDeclarationSniff:

    # end of all php files should be empty line  
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Files\EndFileNewlineSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Files\ClosingTagSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\ControlStructureSpacingSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\SwitchDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\ControlStructures\ElseIfDeclarationSniff:
    PHP_CodeSniffer\Standards\PSR2\Sniffs\Methods\FunctionCallSignatureSniff: