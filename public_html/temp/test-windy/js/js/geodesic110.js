"use strict";void 0===Number.prototype.toRadians&&(Number.prototype.toRadians=function(){return this*Math.PI/180}),void 0===Number.prototype.toDegrees&&(Number.prototype.toDegrees=function(){return 180*this/Math.PI});var INTERSECT_LNG=179.999;L.Geodesic=L.Polyline.extend({options:{color:"blue",steps:10,dash:1,wrap:!0},initialize:function(t,a){this.options=this._merge_options(this.options,a),this.options.dash=Math.max(.001,Math.min(1,parseFloat(this.options.dash)||1)),this.datum={},this.datum.ellipsoid={a:6378137,b:6356752.3142,f:1/298.257223563},this._latlngs=this._generate_Geodesic(t),L.Polyline.prototype.initialize.call(this,this._latlngs,this.options)},setLatLngs:function(t){this._latlngs=this._generate_Geodesic(t),L.Polyline.prototype.setLatLngs.call(this,this._latlngs)},getStats:function(){let t,a,s={distance:0,points:0,polygons:this._latlngs.length};for(t=0;t<this._latlngs.length;t++)for(s.points+=this._latlngs[t].length,a=0;a<this._latlngs[t].length-1;a++)s.distance+=this._vincenty_inverse(this._latlngs[t][a],this._latlngs[t][a+1]).distance;return s},geoJson:function(t){let a=L.GeoJSON.asFeature(t),s="FeatureCollection"===a.type?a.features:[a];this._latlngs=[];for(let t of s){let a="Feature"===t.type?t.geometry:t,s=a.coordinates;switch(a.type){case"LineString":this._latlngs.push(this._generate_Geodesic([L.GeoJSON.coordsToLatLngs(s,0)]));break;case"MultiLineString":case"Polygon":this._latlngs.push(this._generate_Geodesic(L.GeoJSON.coordsToLatLngs(s,1)));break;case"Point":case"MultiPoint":console.log("Dude, points can't be drawn as geodesic lines...");break;default:console.log("Drawing "+a.type+" as a geodesic is not supported. Skipping...")}}L.Polyline.prototype.setLatLngs.call(this,this._latlngs)},createCircle:function(t,a){let s,n=0,i={lat:0,lng:0,brg:0};this._latlngs=[],this._latlngs[n]=[];let e=this._vincenty_direct(L.latLng(t),0,a,this.options.wrap);for(i=L.latLng(e.lat,e.lng),this._latlngs[n].push(i),s=1;s<=this.options.steps;){e=this._vincenty_direct(L.latLng(t),360/this.options.steps*s,a,this.options.wrap);let l=L.latLng(e.lat,e.lng);if(Math.abs(l.lng-i.lng)>180){let t=this._vincenty_inverse(i,l),a=this._intersection(i,t.initialBearing,{lat:-89,lng:l.lng-i.lng>0?-INTERSECT_LNG:INTERSECT_LNG},0);a?(this._latlngs[n].push(L.latLng(a.lat,a.lng)),n++,this._latlngs[n]=[],i=L.latLng(a.lat,-a.lng),this._latlngs[n].push(i)):(n++,this._latlngs[n]=[],this._latlngs[n].push(l),i=l,s++)}else this._latlngs[n].push(l),i=l,s++}L.Polyline.prototype.setLatLngs.call(this,this._latlngs)},_generate_Geodesic:function(t){let a=[],s=0;for(let n=0;n<t.length;n++){a[s]=[];let i=L.latLng(t[n][0]);for(let e=0;e<t[n].length-1;e++){let l=i,o=L.latLng(t[n][e+1]);if(l.equals(o))continue;let h=this._vincenty_inverse(l,o);a[s].push(i);for(let t=1;t<=this.options.steps;){let n=h.distance/this.options.steps,e=t-1+this.options.dash,o=this._vincenty_direct(l,h.initialBearing,n*e,this.options.wrap),r=L.latLng(o.lat,o.lng);if(Math.abs(r.lng-i.lng)>180){let n=this._intersection(l,h.initialBearing,{lat:-89,lng:r.lng-i.lng>0?-INTERSECT_LNG:INTERSECT_LNG},0);n?(a[s].push(L.latLng(n.lat,n.lng)),a[++s]=[],i=L.latLng(n.lat,-n.lng),a[s].push(i)):(a[++s]=[],a[s].push(r),i=r,t++)}else{if(a[s].push(r),this.options.dash<1){s++;let e=this._vincenty_direct(l,h.initialBearing,n*t,this.options.wrap);a[s]=[],i=L.latLng(e.lat,e.lng),a[s].push(i)}else i=r;t++}}}s++}return a},_vincenty_direct:function(t,a,s,n){var i,e,l,o,h=t.lat.toRadians(),r=t.lng.toRadians(),g=a.toRadians(),M=s,c=this.datum.ellipsoid.a,p=this.datum.ellipsoid.b,u=this.datum.ellipsoid.f,d=Math.sin(g),_=Math.cos(g),L=(1-u)*Math.tan(h),f=1/Math.sqrt(1+L*L),v=L*f,y=Math.atan2(L,_),N=f*d,P=1-N*N,m=P*(c*c-p*p)/(p*p),I=1+m/16384*(4096+m*(m*(320-175*m)-768)),b=m/1024*(256+m*(m*(74-47*m)-128)),R=M/(p*I),G=0;do{o=Math.cos(2*y+R),i=R,R=M/(p*I)+b*(e=Math.sin(R))*(o+b/4*((l=Math.cos(R))*(2*o*o-1)-b/6*o*(4*e*e-3)*(4*o*o-3)))}while(Math.abs(R-i)>1e-12&&++G);var S,T=v*e-f*l*_,w=Math.atan2(v*l+f*e*_,(1-u)*Math.sqrt(N*N+T*T)),D=u/16*P*(4+u*(4-3*P)),E=Math.atan2(e*d,f*l-v*e*_)-(1-D)*u*N*(R+D*e*(o+D*l*(2*o*o-1)));S=n?(r+E+3*Math.PI)%(2*Math.PI)-Math.PI:r+E;var q=Math.atan2(N,-T);return{lat:w.toDegrees(),lng:S.toDegrees(),finalBearing:q.toDegrees()}},_vincenty_inverse:function(t,a){var s,n,i,e,l,o,h,r,g=t.lat.toRadians(),M=t.lng.toRadians(),c=a.lat.toRadians(),p=a.lng.toRadians(),u=this.datum.ellipsoid.a,d=this.datum.ellipsoid.b,_=this.datum.ellipsoid.f,L=p-M,f=(1-_)*Math.tan(g),v=1/Math.sqrt(1+f*f),y=f*v,N=(1-_)*Math.tan(c),P=1/Math.sqrt(1+N*N),m=N*P,I=L,b=0;do{var R=P*(h=Math.sin(I))*(P*h)+(v*m-y*P*(r=Math.cos(I)))*(v*m-y*P*r);if(0==(i=Math.sqrt(R)))return 0;l=y*m+v*P*r,o=Math.atan2(i,l);var G=v*P*h/i;e=l-2*y*m/(n=1-G*G),isNaN(e)&&(e=0);var S=_/16*n*(4+_*(4-3*n));s=I,I=L+(1-S)*_*G*(o+S*i*(e+S*l*(2*e*e-1)))}while(Math.abs(I-s)>1e-12&&++b<100);if(b>=100)return console.log("Formula failed to converge. Altering target position."),this._vincenty_inverse(t,{lat:a.lat,lng:a.lng-.01});var T=n*(u*u-d*d)/(d*d),w=T/1024*(256+T*(T*(74-47*T)-128)),D=d*(1+T/16384*(4096+T*(T*(320-175*T)-768)))*(o-w*i*(e+w/4*(l*(2*e*e-1)-w/6*e*(4*i*i-3)*(4*e*e-3)))),E=Math.atan2(P*h,v*m-y*P*r),q=Math.atan2(v*h,-y*P+v*m*r);return{distance:D=Number(D.toFixed(3)),initialBearing:E.toDegrees(),finalBearing:q.toDegrees()}},_intersection:function(t,a,s,n){var i=t.lat.toRadians(),e=t.lng.toRadians(),l=s.lat.toRadians(),o=s.lng.toRadians(),h=Number(a).toRadians(),r=Number(n).toRadians(),g=l-i,M=o-e,c=2*Math.asin(Math.sqrt(Math.sin(g/2)*Math.sin(g/2)+Math.cos(i)*Math.cos(l)*Math.sin(M/2)*Math.sin(M/2)));if(0==c)return null;var p=Math.acos((Math.sin(l)-Math.sin(i)*Math.cos(c))/(Math.sin(c)*Math.cos(i)));isNaN(p)&&(p=0);var u,d,_=Math.acos((Math.sin(i)-Math.sin(l)*Math.cos(c))/(Math.sin(c)*Math.cos(l)));Math.sin(o-e)>0?(u=p,d=2*Math.PI-_):(u=2*Math.PI-p,d=_);var L=(h-u+Math.PI)%(2*Math.PI)-Math.PI,f=(d-r+Math.PI)%(2*Math.PI)-Math.PI;if(0==Math.sin(L)&&0==Math.sin(f))return null;if(Math.sin(L)*Math.sin(f)<0)return null;var v=Math.acos(-Math.cos(L)*Math.cos(f)+Math.sin(L)*Math.sin(f)*Math.cos(c)),y=Math.atan2(Math.sin(c)*Math.sin(L)*Math.sin(f),Math.cos(f)+Math.cos(L)*Math.cos(v)),N=Math.asin(Math.sin(i)*Math.cos(y)+Math.cos(i)*Math.sin(y)*Math.cos(h)),P=e+Math.atan2(Math.sin(h)*Math.sin(y)*Math.cos(i),Math.cos(y)-Math.sin(i)*Math.sin(N));return P=(P+3*Math.PI)%(2*Math.PI)-Math.PI,{lat:N.toDegrees(),lng:P.toDegrees()}},_merge_options:function(t,a){let s={};for(let a in t)s[a]=t[a];for(let t in a)s[t]=a[t];return s}}),L.geodesic=function(t,a){return new L.Geodesic(t,a)};